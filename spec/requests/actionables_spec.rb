require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/actionables", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Actionable. As you add validations to Actionable, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      action: 'Test Action',
      status: 'open',
      subproduct: 'Test Subproduct',
      actionable_category: 'Test Category',
      feedback_category: 'Test Feedback',
      feedback_json: '{"key": "value"}'
    }
  }

  let(:invalid_attributes) {
    {
      action: '',
      status: '',
      subproduct: '',
      actionable_category: '',
      feedback_category: '',
      feedback_json: ''
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Actionable.create! valid_attributes
      get actionables_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      actionable = Actionable.create! valid_attributes
      get actionable_url(actionable)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_actionable_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      actionable = Actionable.create! valid_attributes
      get edit_actionable_url(actionable)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Actionable" do
        expect {
          post actionables_url, params: { actionable: valid_attributes }
        }.to change(Actionable, :count).by(1)
      end

      it "redirects to the created actionable" do
        post actionables_url, params: { actionable: valid_attributes }
        expect(response).to redirect_to(actionable_url(Actionable.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Actionable" do
        expect {
          post actionables_url, params: { actionable: invalid_attributes }
        }.to change(Actionable, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post actionables_url, params: { actionable: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          action: 'Sample Action',
          status: 'close',
          subproduct: 'Sample Subproduct',
          actionable_category: 'Sample Category',
          feedback_category: 'Sample Feedback',
          feedback_json: '{"key2": "value2"}'
    }
      }

      it "updates the requested actionable" do
        actionable = Actionable.create! valid_attributes
        patch actionable_url(actionable), params: { actionable: new_attributes }
        actionable.reload
      end

      it "redirects to the actionable" do
        actionable = Actionable.create! valid_attributes
        patch actionable_url(actionable), params: { actionable: new_attributes }
        actionable.reload
        expect(response).to redirect_to(actionable_url(actionable))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        actionable = Actionable.create! valid_attributes
        patch actionable_url(actionable), params: { actionable: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested actionable" do
      actionable = Actionable.create! valid_attributes
      expect {
        delete actionable_url(actionable)
      }.to change(Actionable, :count).by(-1)
    end

    it "redirects to the actionables list" do
      actionable = Actionable.create! valid_attributes
      delete actionable_url(actionable)
      expect(response).to redirect_to(actionables_url)
    end
  end
end
